{"version":3,"sources":["Components/User.js","Components/Comment.js","Components/CommentList.js","Components/Post.js","Components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","href","email","name","Comment","Components_User","text","CommentList","commentList","list","forEach","item","push","Components_Comment","body","id","postId","key","Post","concat","this","author","address","city","street","suite","zipcode","title","getAddress","Components_CommentList","comments","React","Component","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","requested","loaded","completedData","authors","posts","filter","loadData","bind","assertThisInitialized","filterChanged","listChanged","_this2","setState","xhrPosts","XMLHttpRequest","open","addEventListener","xhrAuthors","xhrComments","JSON","parse","response","data","post","find","userId","comment","src_Components_Post","send","event","target","value","trim","filtredPosts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","type","placeholder","onChange","onKeyDown","className","onClick","App","Components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ebdaa7a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <address>\r\n      <a href={\"mailto:\" + props.email}>\r\n        {props.name}\r\n      </a><br/>\r\n    </address>\r\n  )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction Comment(props) {\r\n  return (\r\n    <li>\r\n      <User name={props.name}email={props.email}/>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList(props) {\r\n  const commentList = [];\r\n  props.list.forEach((item) => {\r\n    commentList.push(<Comment text={item.body} name={item.name}\r\n                              id={item.postId} email={item.email} key={item.id}/>)\r\n  });\r\n  return (\r\n    <ul>\r\n      {commentList}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\nimport './Post.css';\r\n\r\nclass Post extends React.Component {\r\n  getAddress(){\r\n    return (\r\n      `${this.props.author.address.city}, ${this.props.author.address.street}, \r\n    ${this.props.author.address.suite}, ${this.props.author.address.zipcode},`\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h3>{this.props.title}</h3>\r\n        <p>{this.props.text}</p>\r\n        <User name={this.props.author.name} email={this.props.author.email}/>\r\n        <span> {this.getAddress()}</span>\r\n        <CommentList list={this.props.comments}/>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post.js';\r\n\r\nclass PostList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requested: false,\r\n      loaded: false,\r\n      completedData: [],\r\n      authors: [],\r\n      posts: [],\r\n      comments: [],\r\n      filter: ''\r\n    };\r\n    this.loadData = this.loadData.bind(this);\r\n    this.filterChanged = this.filterChanged.bind(this);\r\n    this.listChanged = this.listChanged.bind(this);\r\n  }\r\n\r\n  loadData() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n\r\n    const xhrPosts = new XMLHttpRequest();\r\n    xhrPosts.open('GET',  'https://jsonplaceholder.typicode.com/posts');\r\n    xhrPosts.addEventListener('load',() => {\r\n      const xhrAuthors = new XMLHttpRequest();\r\n      xhrAuthors.open('GET',  'https://jsonplaceholder.typicode.com/users');\r\n      xhrAuthors.addEventListener('load',() => {\r\n        const xhrComments = new XMLHttpRequest();\r\n        xhrComments.open('GET',  'https://jsonplaceholder.typicode.com/comments');\r\n        xhrComments.addEventListener('load',() => {\r\n          this.setState({\r\n            loaded: true,\r\n            authors: JSON.parse(xhrAuthors.response),\r\n            posts: JSON.parse(xhrPosts.response),\r\n            comments: JSON.parse(xhrComments.response)\r\n          });\r\n          const data = [];\r\n          this.state.posts.forEach((post) => {\r\n            post.author = this.state.authors.find(author => author.id === post.userId);\r\n            post.comments = this.state.comments.filter(comment => comment.postId === post.id);\r\n            data.push(<Post title={post.title} text={post.body} id={post.id}\r\n                                                author={post.author}\r\n                                                comments={post.comments} key={post.id}/>)\r\n          });\r\n          this.setState({\r\n            completedData: data\r\n          });\r\n        });\r\n        xhrComments.send();\r\n      });\r\n      xhrAuthors.send();\r\n    });\r\n    xhrPosts.send();\r\n  }\r\n\r\n  filterChanged(event) {\r\n    this.setState({\r\n      filter: event.target.value\r\n    })\r\n  }\r\n\r\n  listChanged(event) {\r\n    if (event.key === 'Enter' && this.state.filter.trim() !== '') {\r\n      const filtredPosts = [];\r\n      for (const post of this.state.completedData) {\r\n        if (post.props.text.includes(this.state.filter) || post.props.title.includes(this.state.filter)) {\r\n          filtredPosts.push(post)\r\n        }\r\n      }\r\n      this.setState({\r\n        completedData: filtredPosts\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <button onClick={this.loadData} className='request'>Show the list!</button>\r\n    } else if (this.state.loaded) {\r\n      return (\r\n        <div>\r\n          <input type='text' placeholder=\"Search\" onChange={this.filterChanged}\r\n                 onKeyDown={this.listChanged} className='filter' key={1} />\r\n          {this.state.completedData }\r\n\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\nimport './App.css';\nimport PostList from './Components/PostList';\n\nfunction App() {\n  return (\n    <PostList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('body'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}