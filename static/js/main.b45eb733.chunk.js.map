{"version":3,"sources":["Components/Comment.js","Components/CommentList.js","Components/User.js","Components/Post.js","Components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["Comment","react_default","a","createElement","Components_User","name","this","props","email","text","React","Component","CommentList","commentList","list","forEach","item","push","Components_Comment","body","id","postId","key","User","href","address","Post","concat","author","city","street","suite","zipcode","title","getAddress","Components_CommentList","comments","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","requested","loaded","completedData","authors","posts","filter","loadData","bind","assertThisInitialized","createCompletedData","filterChanged","_this2","setState","xhrPosts","XMLHttpRequest","open","addEventListener","xhrAuthors","xhrComments","JSON","parse","response","send","_this3","post","find","userId","comment","src_Components_Post","event","target","value","trim","type","placeholder","onChange","onClick","className","App","Components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b45eb733.chunk.js","sourcesContent":["import React from 'react';\r\nimport User from './User';\r\n\r\nclass Comment extends React.Component {\r\n  render() {\r\n    return (\r\n      <li>\r\n        <User name={this.props.name}email={this.props.email}/>\r\n        <p>{this.props.text}</p>\r\n      </li>\r\n    )\r\n  }\r\n}\r\nexport default Comment;\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nclass CommentList extends React.Component {\r\n  render() {\r\n    const commentList = [];\r\n    this.props.list.forEach((item) => {\r\n      commentList.push(<Comment text={item.body} name={item.name}\r\n                                id={item.postId} email={item.email} key={item.id}/>)\r\n    });\r\n    return (\r\n      <ul>\r\n        {commentList}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport CommentList from './CommentList';\r\n\r\nclass User extends React.Component {\r\n  render() {\r\n    return (\r\n      <address><a href={\"mailto:\" + this.props.email}>{this.props.name}</a><br/>\r\n        <span>{this.props.address}</span></address>\r\n    )\r\n  }\r\n}\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\nimport './Post.css';\r\n\r\nclass Post extends React.Component {\r\n  getAddress(){\r\n    return (\r\n      `${this.props.author.address.city}, ${this.props.author.address.street}, \r\n    ${this.props.author.address.suite}, ${this.props.author.address.zipcode},`\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h3>{this.props.title}</h3>\r\n        <p>{this.props.text}</p>\r\n        <User name={this.props.author.name} email={this.props.author.email}\r\n              address={this.getAddress()}/>\r\n        <CommentList list={this.props.comments}/>\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\n\r\nimport Post from './Post.js';\r\n\r\nclass PostList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requested: false,\r\n      loaded: false,\r\n      completedData: [],\r\n      authors: [],\r\n      posts: [],\r\n      comments: [],\r\n      filter: ''\r\n    };\r\n    this.loadData = this.loadData.bind(this);\r\n   this.createCompletedData = this.createCompletedData.bind(this);\r\n    this.filterChanged = this.filterChanged.bind(this);\r\n  }\r\n  loadData() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n\r\n    const xhrPosts = new XMLHttpRequest();\r\n    xhrPosts.open('GET',  'https://jsonplaceholder.typicode.com/posts');\r\n    xhrPosts.addEventListener('load',() => {\r\n      const xhrAuthors = new XMLHttpRequest();\r\n      xhrAuthors.open('GET',  'https://jsonplaceholder.typicode.com/users');\r\n      xhrAuthors.addEventListener('load',() => {\r\n        const xhrComments = new XMLHttpRequest();\r\n        xhrComments.open('GET',  'https://jsonplaceholder.typicode.com/comments');\r\n        xhrComments.addEventListener('load',() => {\r\n          this.setState({\r\n            loaded: true,\r\n            authors: JSON.parse(xhrAuthors.response),\r\n            posts: JSON.parse(xhrPosts.response),\r\n            comments: JSON.parse(xhrComments.response)\r\n          });\r\n        });\r\n        xhrComments.send();\r\n      });\r\n      xhrAuthors.send();\r\n    });\r\n    xhrPosts.send();\r\n  }\r\n\r\n  createCompletedData() {\r\n    this.state.posts.forEach((post) => {\r\n      post.author = this.state.authors.find(author => author.id === post.userId);\r\n      post.comments = this.state.comments.filter(comment => comment.postId === post.id);\r\n      return this.state.completedData.push(<Post title={post.title} text={post.body}\r\n                                                 author={post.author}\r\n                                                 comments={post.comments} key={post.id}/>)\r\n    })\r\n  }\r\n\r\n  filterChanged(event) {\r\n    this.setState({\r\n      filter:  event.target.value.trim()\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <button onClick={this.loadData} className='request'>Show the list!</button>\r\n    } else if (this.state.loaded) {\r\n      this.createCompletedData();\r\n      //console.log (this.state.completedData)\r\n      //   this.state.completedData.forEach(post => {\r\n      //   if(post.props.text.includes(this.state.filter)) {\r\n      //     this.createCompletedData()\r\n      //   }\r\n      // })\r\n      return (\r\n        <div>\r\n          <input type='text' placeholder=\"Search\" onChange={this.filterChanged} key={1}/>\r\n          {this.state.completedData}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\nimport './App.css';\nimport PostList from './Components/PostList';\n\nfunction App() {\n  return (\n    <PostList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('body'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}